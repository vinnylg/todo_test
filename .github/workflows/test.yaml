name: "Issue to ClickUp Task"
on:
  workflow_dispatch:
  
jobs:
  meu_script:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - name: "Setup Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.x"
      - name: "Create Click Task"
        run: |
          pip install requests
          python -c "
          import requests
          import json
          import os

          # lambdas
          get_priority = lambda tags: 1 if 'urgent' in tags else 2 if 'high' in tags else 3 if 'normal' in tags else 4
          sucess = lambda code: 200 <= code < 300

          # const
          priorities = ['urgent', 'high', 'normal', 'low']

          github_headers = {
            'Authorization': 'token %s' % os.getenv('GITHUB_TOKEN'),
            'Accept': 'application/vnd.github.v3+json'
          }

          ## GET ISSUES
          # Obter o nome do repositÃ³rio
          owner, repo = os.getenv('GITHUB_REPOSITORY').split('/')

          # URL da API para listar issues abertas
          issues_url = f'https://api.github.com/repos/{owner}/{repo}/issues?state=open'
          issues_response = requests.get(issues_url, headers=github_headers)

          if sucess(issues_response.status_code):
            print('Get Issue List successfully')
          else:
            raise Exception('Error to get Issue list:', issues_response.text)

          issues = issues_response.json()
          
          for issue in issues:
            print('Check if Issue has Task ID')

            issue_comment_response = requests.get(issue['comments_url'], headers=github_headers)

            if sucess(issue_comment_response.status_code):
              print('Get Issue Comments successfully')
            else:
              raise Exception('Failed to get comments:', issue_comment_response.content)

            comments = sorted(issue_comment_response.json(), key=lambda x: x['created_at'])
            if len(comments):
              first_comment = comments[0]['body']
              re_task_id = re.search(r'\[#(\w+)\]', first_comment)

              if re_task_id:
                continue
              else:
                print('Not has ClickUp Task')
            else:
              print('Not has comments')

            print('Creating Task in ClickUp from GitHub Issue #%d' % issue['number'])

            clickup_task_url = 'https://api.clickup.com/api/v2/list/%s/task' % os.getenv('CLICKUP_LIST_ID')

            clickup_headers = {
                'Content-Type': 'application/json',
                'Authorization': os.getenv('CLICKUP_TOKEN')
            }

            ## CREATE TASK

            tags = [label['name'].lower() for label in issue['labels']]
            filter_tags = [tag for tag in tags if tag not in priorities]

            task_data = {
              'list': os.getenv('CLICKUP_LIST_ID'),
              'name': '%s #%d' % (issue['title'], issue['number']),
              'markdown_description': issue['body'],
              'tags': filter_tags,
              'priority': get_priority(tags),
              'status': 'Open',
              'assignees': os.getenv('CLICKUP_ASSIGNESS_LIST')
            }

            task_response = requests.post(clickup_task_url, headers=clickup_headers, json=task_data)

            if sucess(task_response.status_code):
              print('Task created successfully!')
            else:
              raise Exception('Error creating task in ClickUp:', task_response.text)

            ## CREATE COMMENT IN TASK

            task_response_json = task_response.json()
            task_id = task_response_json['id']
            task_url = task_response_json['url']

            clickup_comment_url = 'https://api.clickup.com/api/v2/task/%s/comment' % task_id

            clickup_comment_data = {
              'comment': [
                  {
                      'type': 'bookmark',
                      'bookmark': {
                          'url': issue['html_url'],
                          'service': 'github'
                      }
                  }
              ]
            }

            clickup_comment_response = requests.post(clickup_comment_url, headers=clickup_headers, json=clickup_comment_data)

            if sucess(clickup_comment_response.status_code):
                print('Comment added to ClickUp Task successfully!')
            else:
                raise Exception('Error adding comment in ClickUp Task:', clickup_comment_response.text)


            ## UPDATE LABELS IN ISSUE

            issue_labels_update = {
              'labels': filter_tags + [ priorities[get_priority(tags) - 1] ]
            }

            issue_update_response = requests.patch(issue['url'], headers=github_headers, json=issue_labels_update)

            if sucess(issue_update_response.status_code):
              print('Update Issue successfully!')
            else:
              raise Exception('Failed to change Issue:', issue_update_response.content)


            ## CREATE COMMENT IN ISSUE

            issue_comment_data = {
              'body': '[#%s](%s)' % (task_id,task_url)
            }

            issue_comment_response = requests.post(issue['comments_url'], headers=github_headers, json=issue_comment_data)

            if sucess(issue_comment_response.status_code):
              print('Comment posted successfully in Issue')
            else:
              raise Exception('Failed to post comment:', issue_comment_response.content)
          "
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLICKUP_TOKEN: ${{ secrets.CLICKUP_TOKEN }}
          CLICKUP_LIST_ID: ${{ vars.CLICKUP_LIST_ID }}
          CLICKUP_ASSIGNESS_LIST: ${{ vars.CLICKUP_ASSIGNESS_LIST }}
