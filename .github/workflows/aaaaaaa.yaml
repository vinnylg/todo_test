name: "Issue to ClickUp Task"
on:
  issues:
    types: [opened]
jobs:
  meu_script:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - name: "Setup Python"
        uses: "actions/setup-python@v2"
        with:
          python-version: "3.x"
      - name: "Create Click Task"
        run: |
          pip install requests
          python -c "
          import requests
          import json
          import os
          
          issue = json.loads(os.getenv('ISSUE'))
          
          print('Creating Task in ClickUp from GitHub Issue #%d' % issue['number'])
          
          clickup_task_url = 'https://api.clickup.com/api/v2/list/%s/task' % os.getenv('CLICKUP_LIST_ID')
          
          clickup_headers = {
              'Content-Type': 'application/json',
              'Authorization': os.getenv('CLICKUP_TOKEN')
          }
          
          tags = [label['name'].lower() for label in issue['labels']]
          priorities = ['urgent', 'high', 'normal', 'low']
          filter_tags = [tag for tag in tags if tag not in priorities]
          
          get_priority = lambda tags: 1 if 'urgent' in tags else 2 if 'high' in tags else 3 if 'normal' in tags else 4
          
          task_data = {
            'list': os.getenv('CLICKUP_LIST_ID'),
            'name': '#%d %s' % (issue['number'],issue['title']),
            'markdown_description': issue['body'],
            'tags': filter_tags,
            'priority': get_priority(tags),
            'status': 'Open',
            'assignees': os.getenv('CLICKUP_ASSIGNESS_LIST')
          }
          
          ## CREATE TASK
          task_response = requests.post(clickup_task_url, headers=clickup_headers, json=task_data)
          
          if task_response.status_code == requests.codes.ok:
            print('Task created successfully! ID:')
          else:
            raise Exception('Error creating task in ClickUp:', task_response.text)
          
          task_response_json = task_response.json()
          task_id = task_response_json['id']
          task_url = task_response_json['url']
          
          clickup_comment_url = 'https://api.clickup.com/api/v2/task/%s/comment' % task_id
          
          clickup_comment_data = {
            'comment': [
                {
                    'type': 'bookmark',
                    'bookmark': {
                        'url': issue['html_url'],
                        'service': 'github'
                    }
                }
            ]
          }
          
          ## CREATE COMMENT IN TASK
          clickup_comment_response = requests.post(clickup_comment_url, headers=clickup_headers, json=clickup_comment_data)
          
          if clickup_comment_response.status_code == requests.codes.ok:
              print('Comment added to ClickUp Task successfully!')
          else:
              raise Exception('Error adding comment in ClickUp Task:', clickup_comment_response.text)
          
          
          github_headers = {
            'Authorization': 'token %s' % os.getenv('GITHUB_TOKEN'),
            'Accept': 'application/vnd.github.v3+json'
          }
          
          issue_labels_update = {
            'labels': filter_tags + [ priorities[get_priority(tags) - 1] ]
          }
          
          ## UPDATE LABELS IN ISSUE
          issue_update_response = requests.put(issue['url'], headers=github_headers, json=issue_labels_update)
          
          if issue_update_response.status_code == requests.codes.ok:
            print('Update Issue %d successfully!')
          else:
            raise Exception('Failed to post comment:', issue_update_response.content)
          
          
          issue_comment_data = {
            'body': '[#%s](%s)' % (task_id,task_url)
          }
          
          ## CREATE COMMENT IN ISSUE
          issue_comment_response = requests.post(issue['comments_url'], headers=github_headers, json=issue_comment_data)
          
          if issue_comment_response.status_code == requests.codes.ok:
            print('Comment posted successfully in Issue')
          else:
            raise Exception('Failed to post comment:', issue_comment_response.content)          
          "
        env:
          ISSUE: ${{ toJson(github.event.issue) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CLICKUP_TOKEN: ${{ secrets.CLICKUP_TOKEN }}
          CLICKUP_LIST_ID: ${{ vars.CLICKUP_LIST_ID }}
          CLICKUP_ASSIGNESS_LIST: ${{ vars.CLICKUP_ASSIGNESS_LIST }}
